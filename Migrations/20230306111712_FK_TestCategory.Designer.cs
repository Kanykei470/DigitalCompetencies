// <auto-generated />
using System;
using DigitalСompetencies1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitalСompetencies1.Migrations
{
    [DbContext(typeof(DigitalСompetenciesContext))]
    [Migration("20230306111712_FK_TestCategory")]
    partial class FK_TestCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Cyrillic_General_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DigitalСompetencies1.Models.Admin", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("DigitalСompetencies1.Models.Position", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("description")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("DigitalСompetencies1.Models.Result", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<short?>("IdWorker")
                        .HasColumnType("smallint")
                        .HasColumnName("idWorker");

                    b.Property<double?>("Result1")
                        .HasColumnType("float")
                        .HasColumnName("result");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.HasIndex("IdWorker");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("DigitalСompetencies1.Models.TestBank", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<short>("Category")
                        .HasColumnType("smallint")
                        .HasColumnName("category");

                    b.Property<string>("CorrectAns")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("correctAns");

                    b.Property<string>("Op1")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("op1");

                    b.Property<string>("Op2")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("op2");

                    b.Property<string>("Op3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("op3");

                    b.Property<string>("Op4")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("op4");

                    b.Property<string>("Question")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("question");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.ToTable("TestBank", (string)null);
                });

            modelBuilder.Entity("DigitalСompetencies1.Models.TestCategory", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Descriprion")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("descriprion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("TestCategory", (string)null);
                });

            modelBuilder.Entity("DigitalСompetencies1.Models.TextsBank", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<TimeSpan>("ExpectedTime")
                        .HasColumnType("time")
                        .HasColumnName("expectedTime");

                    b.Property<short>("Symbols")
                        .HasColumnType("smallint")
                        .HasColumnName("symbols");

                    b.Property<string>("Text")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.ToTable("TextsBank", (string)null);
                });

            modelBuilder.Entity("DigitalСompetencies1.Models.Worker", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("image")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("number");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<short>("Position")
                        .HasColumnType("smallint")
                        .HasColumnName("position");

                    b.HasKey("Id");

                    b.HasIndex("Position");

                    b.ToTable("Worker", (string)null);
                });

            modelBuilder.Entity("DigitalСompetencies1.Models.Result", b =>
                {
                    b.HasOne("DigitalСompetencies1.Models.Worker", "IdWorkerNavigation")
                        .WithMany("Results")
                        .HasForeignKey("IdWorker")
                        .HasConstraintName("FK_Results_Worker");

                    b.Navigation("IdWorkerNavigation");
                });

            modelBuilder.Entity("DigitalСompetencies1.Models.TestBank", b =>
                {
                    b.HasOne("DigitalСompetencies1.Models.TestCategory", "CategoryNavigation")
                        .WithMany("TestBanks")
                        .HasForeignKey("Category")
                        .IsRequired()
                        .HasConstraintName("FK_TestBank_TestCategory");

                    b.Navigation("CategoryNavigation");
                });

            modelBuilder.Entity("DigitalСompetencies1.Models.Worker", b =>
                {
                    b.HasOne("DigitalСompetencies1.Models.Position", "PositionNavigation")
                        .WithMany("Workers")
                        .HasForeignKey("Position")
                        .IsRequired()
                        .HasConstraintName("FK_Worker_Positions");

                    b.Navigation("PositionNavigation");
                });

            modelBuilder.Entity("DigitalСompetencies1.Models.Position", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("DigitalСompetencies1.Models.TestCategory", b =>
                {
                    b.Navigation("TestBanks");
                });

            modelBuilder.Entity("DigitalСompetencies1.Models.Worker", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
